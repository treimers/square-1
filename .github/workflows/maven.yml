name: Build and Release Native Application

on:
  push:
    branches:
      - master

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17.0.12
          distribution: temurin
          cache: maven
      - name: Build with Maven
        run: mvn clean package -DskipTests
      - name: Extract version from pom.xml
        id: get_version
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: |
            target/deploy/linux/Square-1_*.deb
            target/deploy/linux/Square-1_*.rpm
            target/deploy/linux/Square-1-*-linux.zip

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17.0.12
          distribution: temurin
          cache: maven
      - name: Build with Maven
        run: mvn clean package -DskipTests
      - name: Extract version from pom.xml
        id: get_version
        shell: bash
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: |
            target/deploy/windows/Square-1_*.exe
            target/deploy/windows/Square-1-*-windows.zip

  build-macos-x86_64:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17.0.12
          distribution: temurin
          cache: maven
      - name: Set up Xcode
        run: sudo xcode-select -s /Applications/Xcode_15.2.app
      - name: Build for x86_64
        run: |
          mkdir -p build/x86_64
          mvn clean package -DskipTests \
            -Djavacpp.platform.name=osx-x86_64 \
            -Dmaven.repo.local=build/x86_64/.m2 \
            -Dos.detected.name=osx-x86_64
      - name: Extract version from pom.xml
        id: get_version
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
      - name: Upload macOS x86_64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-x86_64
          path: |
            target/deploy/osx-x86_64/Square-1*.dmg
            target/deploy/osx-x86_64/Square-1*-mac.zip
            target/deploy/osx-x86_64/Square-1_*.pkg

  build-macos-arm64:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17.0.12
          distribution: temurin
          cache: maven
      - name: Set up Xcode
        run: sudo xcode-select -s /Applications/Xcode_15.2.app
      - name: Build for arm64
        run: |
          mkdir -p build/arm64
          mvn clean package -DskipTests \
            -Djavacpp.platform.name=osx-arm64 \
            -Dmaven.repo.local=build/arm64/.m2 \
            -Dos.detected.name=osx-arm64
      - name: Extract version from pom.xml
        id: get_version
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
      - name: Upload macOS arm64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64
          path: |
            target/deploy/osx-arm64/Square-1*.dmg
            target/deploy/osx-arm64/Square-1*-mac.zip
            target/deploy/osx-arm64/Square-1_*.pkg

  create-release:
    needs: [build-linux, build-windows, build-macos-x86_64, build-macos-arm64]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux
          path: ./artifacts/linux

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows
          path: ./artifacts/windows

      - name: Download macOS x86_64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-x86_64
          path: ./artifacts/macos-x86_64

      - name: Download macOS arm64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-arm64
          path: ./artifacts/macos-arm64

      - name: Extract version from pom.xml
        id: get_version
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Fetch tags
        run: git fetch --tags

      - name: Ensure tag exists locally
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "Tag v${{ env.VERSION }} already exists."
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag "v${{ env.VERSION }}"
            git push origin "v${{ env.VERSION }}"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ env.VERSION }}"
          name: "Release v${{ env.VERSION }}"
          files: ./artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}